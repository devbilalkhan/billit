import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { ThemeProvider } from "@/components/theme-provider";
import { Navbar } from "@/components/navbar";

import { serverSideAuth } from "@/lib/server-utils";
import { Toaster } from "sonner";
import prisma from "@/lib/db";
import { KindeUser } from "@kinde-oss/kinde-auth-nextjs/types";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

async function getColorPreference(id: KindeUser<string>["id"]) {
  "use server";

  if (!id) {
    return {
      success: false,
      message: "User ID is required.",
    };
  }

  try {
    const response = await prisma.user.findUnique({
      where: {
        id: id,
      },
      select: {
        colorScheme: true,
      },
    });

    if (!response) {
      return {
        success: false,
        message: "User not found.",
      };
    }

    return {
      success: true,
      data: response,
      message: "Color preference retrieved successfully.",
    };
  } catch (error) {
    return {
      success: false,
      message: "An error occurred while retrieving the color preference.",
      error: error,
    };
  }
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [accessGranted, user] = await serverSideAuth();
  const { data } = await getColorPreference(user?.id);

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable}  ${geistMono.variable} antialiased ${
          data?.colorScheme ?? "theme-green"
        }`}
        suppressHydrationWarning={true}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <Navbar accessGranted={accessGranted} user={user} />
          {children}
          <Toaster />
        </ThemeProvider>
      </body>
    </html>
  );
}
